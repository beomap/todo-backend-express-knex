// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String // Hashed password
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  orgMembers    OrgMember[]
  todoAssignees TodoAssignee[]
  comments      Comment[]

  @@map("users")
}

model Org {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  members  OrgMember[]
  projects Project[]

  @@map("orgs")
}

enum UserOrgRole {
  OWNER
  ADMIN
  MEMBER
}

model OrgMember {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  role      UserOrgRole

  // Relations
  org    Org    @relation(fields: [orgId], references: [id])
  orgId  String @map("org_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([orgId, userId])
  @@map("org_members")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // Relations
  org   Org    @relation(fields: [orgId], references: [id])
  orgId String @map("org_id")
  todos Todo[]

  @@map("projects")
}

enum TodoStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

model Todo {
  id          String     @id @default(uuid())
  title       String
  description String
  status      TodoStatus
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")

  // Relations
  project   Project        @relation(fields: [projectId], references: [id])
  projectId String         @map("project_id")
  assignees TodoAssignee[]
  comments  Comment[]

  @@map("todos")
}

model TodoAssignee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  todo   Todo   @relation(fields: [todoId], references: [id])
  todoId String @map("todo_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([todoId, userId])
  @@map("todo_assignees")
}

model Comment {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  todo   Todo   @relation(fields: [todoId], references: [id])
  todoId String @map("todo_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("comments")
}
